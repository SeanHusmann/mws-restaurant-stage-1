/* Generated by Babel */
// !ES6
'use strict';

var restaurant = undefined;
var map;

/**
 * Set up Service Worker.
 */
registerServiceWorker = function () {
  if (navigator.serviceWorker) {
    navigator.serviceWorker.register('/sw.js');
  }
};
registerServiceWorker();

/**
 * Initialize Google map, called from HTML.
 */
window.initMap = function () {
  self.map = new google.maps.Map(document.getElementsByClassName('map')[0], {
    zoom: 16,
    center: restaurant.latlng,
    scrollwheel: false
  });

  if (self.restaurant) {
    DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);
  }
};

/**
 * Get current restaurant from page URL.
 */
fetchRestaurantFromURL = function (callback) {
  if (self.restaurant) {
    // restaurant already fetched!
    callback(null, self.restaurant);
    return;
  }
  var id = getParameterByName('id');
  if (!id) {
    // no id found in URL
    error = 'No restaurant id in URL';
    callback(error, null);
  } else {
    DBHelper.fetchRestaurantById(id, function (error, restaurant) {
      self.restaurant = restaurant;
      if (!restaurant) {
        console.error(error);
        return;
      }
      fillRestaurantHTML();
      callback(null, restaurant);
    });
  }
};

/**
 * Create restaurant HTML and add it to the webpage
 */
fillRestaurantHTML = function () {
  var restaurant = arguments.length <= 0 || arguments[0] === undefined ? self.restaurant : arguments[0];

  var name = document.getElementsByClassName('restaurant-name')[0];
  name.innerHTML = restaurant.name;

  var address = document.getElementsByClassName('restaurant-address')[0];
  address.innerHTML = restaurant.address;

  var image = document.getElementsByClassName('restaurant-img')[0];
  image.className = 'restaurant-img';
  //image.src = DBHelper.imageUrlForRestaurant(restaurant);

  var availableImageDimensions = ['180w', '304w', '428w', '552w', '676w', '800w'];
  var srcsetString = '' + availableImageDimensions.map(function (dimension) {
    return 'img/' + restaurant.id + '-' + dimension + '.jpg ' + dimension;
  }).join(', ');
  image.setAttribute('srcset', srcsetString);
  image.setAttribute('sizes', '(max-width: 614px) calc(100vw - 2 * 36px), (max-width: 1189px) calc((100vw - 3 * 35px - 2 * 2px) / 2), (max-width: 1399px) calc((100vw - 4 * 35px - 3 * 2px) / 3), (min-width: 1400px) 409px');
  image.src = 'img/' + restaurant.id + '-552w.jpg';
  image.alt = restaurant.name + ' Restaurant';

  var cuisine = document.getElementsByClassName('restaurant-cuisine')[0];
  cuisine.innerHTML = restaurant.cuisine_type;

  // fill operating hours
  if (restaurant.operating_hours) {
    fillRestaurantHoursHTML();
  }
  // fill reviews
  fillReviewsHTML();
};

/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 */
fillRestaurantHoursHTML = function () {
  var operatingHours = arguments.length <= 0 || arguments[0] === undefined ? self.restaurant.operating_hours : arguments[0];

  var hours = document.getElementsByClassName('restaurant-hours')[0];
  for (var key in operatingHours) {
    var row = document.createElement('tr');

    var day = document.createElement('th');
    day.innerHTML = key;
    row.appendChild(day);

    var time = document.createElement('td');
    time.innerHTML = operatingHours[key];
    row.appendChild(time);

    hours.appendChild(row);
  }
};

/**
 * Create all reviews HTML and add them to the webpage.
 */
fillReviewsHTML = function () {
  var reviews = arguments.length <= 0 || arguments[0] === undefined ? self.restaurant.reviews : arguments[0];

  var container = document.getElementsByClassName('reviews-container')[0];
  var title = document.createElement('h3');
  title.innerHTML = 'Reviews';
  container.appendChild(title);

  if (!reviews) {
    var noReviews = document.createElement('p');
    noReviews.innerHTML = 'No reviews yet!';
    container.appendChild(noReviews);
    return;
  }
  var ul = document.getElementsByClassName('reviews-list')[0];
  reviews.forEach(function (review) {
    ul.appendChild(createReviewHTML(review));
  });
  container.appendChild(ul);
};

/**
 * Create review HTML and add it to the webpage.
 */
createReviewHTML = function (review) {
  var li = document.createElement('li');

  var name = document.createElement('p');
  name.innerHTML = review.name;
  name.className = 'reviewer-name';
  li.appendChild(name);

  var date = document.createElement('p');
  date.innerHTML = review.date;
  date.className = 'review-date';
  li.appendChild(date);

  var rating = document.createElement('p');
  rating.innerHTML = 'Rating: ' + review.rating;
  rating.className = 'review-rating';
  li.appendChild(rating);

  var comments = document.createElement('p');
  comments.innerHTML = review.comments;
  comments.className = 'review-text';
  li.appendChild(comments);

  return li;
};

/**
 * Add restaurant name to the breadcrumb navigation menu
 */
fillBreadcrumb = function () {
  var restaurant = arguments.length <= 0 || arguments[0] === undefined ? self.restaurant : arguments[0];

  var breadcrumb = document.querySelector('.breadcrumb ol');
  var li = document.createElement('li');
  li.innerHTML = restaurant.name;
  li.setAttribute('aria-current', 'page');
  breadcrumb.appendChild(li);
};

/**
 * Get a parameter by name from page URL.
 */
getParameterByName = function (name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
};

/**
 * Load non-interactive Google Maps preview image with pin
 * reflecting the location of restaurant.
 */
loadGoogleMapsPreviewImage = function (restaurant) {
  //console.log("New map preview image is being loaded.");
  var mapOverlay = document.querySelector(".map-overlay");
  var map = document.querySelector(".map");
  var mapPreviewImage = document.querySelector(".map-preview");
  var mapContainer = document.querySelector(".map-container");

  mapOverlay.onclick = function () {
    mapOverlay.style.display = "none";
    mapOverlay.parentNode.removeChild(mapOverlay);
    map.style.display = "block";

    if (self.map) {
      google.maps.event.addDomListenerOnce(self.map, "tilesloaded", function () {
        //console.log("tilesloaded fired.");
        mapPreviewImage.parentNode.removeChild(mapPreviewImage);
        map.style.position = "relative";
      });
    }
  };

  var mapStyle = window.getComputedStyle(map);
  var width = Math.trunc(window.innerWidth);
  var height = mapContainer.offsetHeight;

  var pinsStringForStaticMapURL = '&markers=size:%7Ccolor:0xff0000%7Clabel:%7C' + restaurant.latlng.lat + ',+' + restaurant.latlng.lng;

  mapPreviewImage.src = 'https://maps.googleapis.com/maps/api/staticmap?center=' + restaurant.latlng.lat + ',+' + restaurant.latlng.lng + '&zoom=16&scale=1&size=' + width + "x" + height + "&maptype=roadmap&format=jpg&visual_refresh=true" + pinsStringForStaticMapURL + "&key=AIzaSyD7U9qcVcdpFFnhE9Gj7fJ87TU6SbL0OoE ";
};

loadRestaurantDataAndGenerateStaticGoogleMapsImageLink = function () {
  var id = getParameterByName('id');
  if (!id) {
    // no id found in URL
    error = 'No restaurant id in URL';
  } else {
    DBHelper.fetchRestaurantById(id, function (error, restaurant) {
      self.restaurant = restaurant;
      if (!restaurant) {
        console.error(error);
        return;
      }

      if (self.map) {
        DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);
      }

      fillRestaurantHTML();
      fillBreadcrumb();
      loadGoogleMapsPreviewImage(restaurant);
    });
  }
};

/**
 * Fetch restaurants, neighborhoods and cuisines as soon as the page is loaded,
 * not only when Google Maps completely loaded and called initMap().
 */
if (document.readyState === "loading") {
  document.addEventListener('DOMContentLoaded', function (event) {
    loadRestaurantDataAndGenerateStaticGoogleMapsImageLink();
  });
} else {
  loadRestaurantDataAndGenerateStaticGoogleMapsImageLink();
}

/**
 * Load Google Maps script async, once our own script has finished 
 * loading async, so the initMap function was defined.
 */
document.getElementById("gmaps-script-element").src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyD7U9qcVcdpFFnhE9Gj7fJ87TU6SbL0OoE &libraries=places&callback=initMap";